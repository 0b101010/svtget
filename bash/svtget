#!/bin/bash

# SVTGet v0.1.1
# Updates can be found at http://svtget.se/
# Support the project with Flattr: https://flattr.com/thing/300374/SVT-Get-a-local-cache-tool-for-SVT-Play
#
# Description: The script can download the RTMP streams available from the
# online streaming service "SVT Play", managed by Sveriges Television
#
# Original author: Mikael "MMN-o" Nordfeldth
# License: GPLv3
# http://www.gnu.org/licenses/gpl-3.0.txt
#
# URL: http://blog.mmn-o.se/
# Flattr: https://flattr.com/thing/188162/MMN-o-on-Flattr

# Changelog:
# -- v0.1.1
#    * deb package created by sikevux, small fixes on other stuff
# -- v0.1
#    * Initial functionality. Normal links seem to be working.

# Sample usage:
# ./svtget http://svtplay.se/v/2440756/k_special/presspauseplay

if [ `uname` == "Darwin" ]; then
    SED=gsed
else
    SED=sed
fi

DEPENDENCIES="rtmpdump curl $SED cut bash vlc wget"
for DEP in $DEPENDENCIES; do
	if [ -z "`which $DEP`" ]; then
		echo "ERROR: Missing dependency '$DEP'." >&2
		exit
	fi
done

# Available bitrates: 320 850 1400 2400
BITRATE=""
function set_bitrate {
	case $1 in
	l)	BITRATE=320	;;
	m)	BITRATE=850	;;
	n)	BITRATE=1400	;;
	h)	BITRATE=2400	;;
	320|850|1400|2400)
		BITRATE=$1	;;
	*)
		echo "Bad quality setting ($1), keeping setting '$BITRATE'"
		;;
	esac
}

function get_tcUrls {
	local html=$1
	local bitrate=$2
	expr "$bitrate" + 1 &> /dev/null
	if [ $? -gt 0 ] || [ -z "$bitrate" ] || [ "$bitrate" -eq 0 ]; then
		bitrate='[0-9]\+'
	fi
	#normal clip
	echo $html | $SED "s/\(rtmp[e]\?:[^|&]*\),bitrate:\($bitrate\)/\\n\2|\1\\n/g" | grep -E '^[[:digit:]]+\|' | sort -n | uniq
	if [ -z "$tcUrls" ]; then
	 	#from Ã¶ppet arkiv
		echo $html | $SED "s/\(rtmp[e]\?:[^|&]*\)&amp;/\\n320|\1\\n/g" | grep -E '^[[:digit:]]+\|' | sort -n | uniq
	fi
	if [ -z "$tcUrls" ]; then
		#flv-files
		echo $html | $SED "s/\(http\?:[^|&]*\.flv\)&amp;/\\n320|\1\\n/g" | grep -E '^[[:digit:]]+\|' | sort -n | uniq
	fi
}

function get_sub {
	local html=$1
	echo $html | $SED "s/subtitle\=\(http:[^|&]*\)\&amp/\\n\-\-sub\-file \1\\n/g"| grep "\-\-sub\-file " | uniq
}

function pick_tcUrl {
	echo "#  Bitrate	Stream name" >&2
	let n=1
	for STREAM in $@; do
		local BITRATE=`echo $STREAM | cut -d '|' -f 1 -`
		Streams[$n]=`echo $STREAM | cut -d '|' -f 2 -`
		local NAME=`basename $STREAM`
		echo "$n. ${BITRATE} kbps	$NAME" >&2
		let n++
	done
	
	stream=0
	if [ "$#" -eq 1 ]; then
		stream=1
	fi
	while [ -z ${Streams[$stream]} ]; do
		echo -ne "\nWhich file do you want? [#] "
		read stream
		if [ -n "$stream" ] && [ "q" == "$stream" ]; then
			exit
		fi
	done
	tcUrl=${Streams[$stream]}
}

function print_help {
	echo -e "Usage: $0 -q [l|m|n|h|320|850|1400|2400] -m [file|vlc] -s [y|n] http://svtplay.se/v/..."
	echo -e " -q\tquality of the stream"
	echo -e " -m\tmethod, save to file or play in vlc"
	echo -e " -s\tsubtitle, yes or no"
}

function askOverwrite {
    echo  "The file \"$1\" exists already!"
    while true; do
	read -p "Do you want to owerwrite? [y/n] " yesno
	case $yesno in
	    y* | Y* )
		break
		;;
	    n* | N* | q )
		exit 1
		;;
	    *)
		;;
	esac
    done
}

while getopts "q:m:s:h" opt; do
	case $opt in
	q)
		set_bitrate $OPTARG
		;;
	m)
		method=$OPTARG
		;;
	s)
		subtitle=$OPTARG
		;;
	h)
		print_help
		exit 0
		;;
	\?)
		echo "invalid option: -$OPTARG" >&2
		exit 1
		;;
	esac
done

pageUrl=${!#}
if [ -z "$pageUrl" ] || [ "$pageUrl" == $0 ]; then
	print_help
	exit 1
fi

if [[ ! "$pageUrl" =~ http://svtplay.se ]]; then
	echo "Bad URL. Not SVT Play?" >&2
	exit 1
fi

pageUrl=`echo $pageUrl | sed 's/^\([^?]*\).*/\1/'` 

HTML=`curl -s "$pageUrl"`
swfUrl="http://svtplay.se"`echo $HTML | $SED 's/.*x-shockwave-flash" data="\([^"]\+\)\".*/\1/'`
tcUrls=$(get_tcUrls "$HTML" "$BITRATE")
if [ -z "$tcUrls" ]; then
	echo "ERROR: No rtmp streams found. No clip in that quality?
Please visit http://svtget.se/ for updates and information. If the website's down, use a search engine to find copies." >&2
	exit 1
fi

pick_tcUrl $tcUrls

if [ "${tcUrl##*.}" == "flv" ]; then
	extension="flv"
else
	extension="mp4"
fi
filename="$(basename $pageUrl).$extension"
prefix="$(basename $(dirname $pageUrl))"
if echo "$prefix" | grep -qE '[^0-9]+' ; then
	filename="${prefix}_${filename}"
fi

if [ -e "$filename" ]; then
    askOverwrite $filename
fi

if [ -z $subtitle ]; then
	echo -ne "\nwant subtitle? [y/n] "
	read subtitle
fi

if [ -n "$subtitle" ] && [ "y" == "$subtitle" ]; then
	subUrl=$(get_sub "$HTML")
	if [ -z "$subUrl" ]; then
		echo "No subtitle found."
		subtitle="n"
	else
		sub_filename="$(basename $pageUrl).srt"
	fi
elif [ "n" == "$subtitle" ]; then
	subUrl=""
	subtitle="n"
else
	echo "argument \"-s $subtitle\" unknown"
	exit 1
fi

if [ -z $method ]; then
	echo -ne "\nDo you want to view i vlc or save to file? [v/f] "
	read ask_method
	if [ -n "$ask_method" ] && [ "v" == "$ask_method" ]; then
		method="vlc"
	elif [ -n "$ask_method" ] && [ "f" == "$ask_method" ]; then
		method="file"
	else
		echo "method "$ask_method" unknown"
		exit 1
	fi
fi

if [ $method == "file" ]; then
	if [ $extension == "mp4" ]; then
		#echo "rtmpdump -r "$tcUrl" --swfVfy="$swfUrl" -o "$filename""
		rtmpdump -r "$tcUrl" --swfVfy="$swfUrl" -o "$filename"
	elif [ $extension == "flv" ]; then
		#echo "wget "$tcUrl" -O "$filename""
		wget "$tcUrl" -O "$filename"
	fi
	if [ $subtitle == "y" ]; then
		subUrl=`echo "$subUrl" | sed 's/\-\-sub\-file //g'`
		#echo "wget "$subUrl" -O "$sub_filename""
		wget "$subUrl" -O "$sub_filename"
	fi
elif [ $method == "vlc" ]; then
	if [ $extension == "mp4" ]; then
		#echo "rtmpdump -r "$tcUrl" --swfVfy="$swfUrl" -o - | vlc - $subUrl"
		rtmpdump -r "$tcUrl" --swfVfy="$swfUrl" -o - | vlc - $subUrl &>/dev/null
	elif [ $extension == "flv" ]; then
		#echo "vlc "$tcUrl" "$subUrl""
		vlc "$tcUrl" "$subUrl" &>/dev/null
	fi
else
	echo "argument \"-m $method\" unknown"
fi
